Scanning Folder: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search
========================================
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search\asgi.py
File Name: asgi.py
Code:
"""
ASGI config for job_search project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'job_search.settings')

application = get_asgi_application()

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search\settings.py
File Name: settings.py
Code:
"""
Django settings for job_search project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-iciqweur=hp(xnyau)ev9d0@t)4orp)js8=t8qayvib05if0+3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'api.apps.ApiConfig',

    'rest_framework',
    "corsheaders",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    "corsheaders.middleware.CorsMiddleware",

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'job_search.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'frontend/build'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'job_search.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'frontend/build/static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_ALL_ORIGINS = True
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search\urls.py
File Name: urls.py
Code:
"""
URL configuration for job_search project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
    path('', TemplateView.as_view(template_name='index.html')),

]

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search\wsgi.py
File Name: wsgi.py
Code:
"""
WSGI config for job_search project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'job_search.settings')

application = get_wsgi_application()

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\job_search\__init__.py
File Name: __init__.py
Code:

----------------------------------------
Scanning Folder: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api
========================================
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\admin.py
File Name: admin.py
Code:
from django.contrib import admin

# Register your models here.

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\apps.py
File Name: apps.py
Code:
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\models.py
File Name: models.py
Code:
# api/models.py
from django.db import models

class JobListing(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    requirements = models.TextField()
    salary = models.CharField(max_length=100, null=True, blank=True)
    company_name = models.CharField(max_length=255)
    website_link = models.URLField()

    def __str__(self):
        return self.title

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\tests.py
File Name: tests.py
Code:
from django.test import TestCase

# Create your tests here.

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\urls.py
File Name: urls.py
Code:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.getRoutes, name='routes'),
    path('search-jobs/', views.search_jobs, name='search_jobs'),
    path('jobs', views.getJobs, name='getjobs'),
    path('jobs/<str:pk>', views.getJob, name='getjob'),
]
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\views.py
File Name: views.py
Code:
from django.shortcuts import render
import requests
from rest_framework.response import Response
from rest_framework.decorators import api_view

# Create your views here.
@api_view(['GET'])
def getRoutes(request):
    routes = [
        {
            'Endpoint': '/search-jobs/',
            'method': 'GET',
            'body': None,
            'description': 'Search for jobs'
        },
        {
            'Endpoint': '/jobs/',
            'method': 'GET',
            'body': None,
            'description': 'Returns an array of jobs'
        },
        {
            'Endpoint': '/jobs/id',
            'method': 'GET',
            'body': None,
            'description': 'Returns a single job object'
        },
    ]
    return Response(routes)

@api_view(['GET'])
def search_jobs(request):
    query = request.GET.get('q', '')  
    page = request.GET.get('page', 1)
    url = "https://jsearch.p.rapidapi.com/search"
    headers = {
        "X-RapidAPI-Key": "f1d11be64amsh89631870d6b02dfp18b427jsndf94614b5b5c",
        "X-RapidAPI-Host": "jsearch.p.rapidapi.com"
    }
    querystring = {
        "query": query,
        "page": page,
        "num_pages": 1
    }
    response = requests.get(url, headers=headers, params=querystring)
    if response.status_code == 200:
        return Response(response.json())
    else:
        return Response({"error": "Failed to fetch job listings"}, status=500)
    

    
@api_view(['GET'])
def getJobs(request):
    return ...

@api_view(['GET'])
def getJob(request):
    return ...
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\__init__.py
File Name: __init__.py
Code:

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\migrations\0001_initial.py
File Name: 0001_initial.py
Code:
# Generated by Django 5.0.2 on 2024-05-12 14:49

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='JobListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('requirements', models.TextField()),
                ('salary', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name', models.CharField(max_length=255)),
                ('website_link', models.URLField()),
            ],
        ),
    ]

----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\api\migrations\__init__.py
File Name: __init__.py
Code:

----------------------------------------
Scanning Folder: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src
========================================
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\App.css
File Name: App.css
Code:
/* App.css */
body {
  font-family: 'Roboto', sans-serif;
  line-height: 1.6;
  color: #fff;
  background: linear-gradient(135deg, #1a1a1a, #2e2e2e);
}

.App {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

@media (max-width: 768px) {
  .App {
    padding: 1rem;
  }
}
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\App.js
File Name: App.js
Code:
// App.js
import React from 'react';
import JobSearch from './pages/JobSearch';
import SearchResults from './pages/SearchResults';
import { HashRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css';

function App() {
  return (
    <div className="App">
      <Router>
        <Routes>
          <Route path="/" element={<JobSearch />} />
          <Route path="/search-results" element={<SearchResults />} />
        </Routes>
      </Router>
    </div>
  );
}

export default App;
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\index.js
File Name: index.js
Code:
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\JobModal.css
File Name: JobModal.css
Code:
/* JobModal.css */
.job-modal {
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .job-modal-content {
    background: linear-gradient(135deg, #2e2e2e, #444);
    padding: 3rem;
    border-radius: 10px;
    max-width: 800px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    position: relative;
  }
  
  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 2rem;
    color: #aaa;
    cursor: pointer;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }
  
  .close-button:hover {
    color: #ff9900;
  }
  
  .apply-link {
    display: inline-block;
    margin-top: 1rem;
    padding: 1rem 2rem;
    background: linear-gradient(45deg, #ff9900, #ff6600);
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    transition: background-color 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  .apply-link:hover {
    background: linear-gradient(45deg, #ff6600, #ff9900);
  }
  
  .job-description {
    margin-top: 2rem;
    line-height: 1.8;
    color: #fff;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\JobSearch.css
File Name: JobSearch.css
Code:
/* JobSearch.css */
.job-search-container {
    text-align: center;
    padding: 2rem;
  }
  
  .job-search-heading {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #ff9900;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\SearchBar.css
File Name: SearchBar.css
Code:
/* SearchBar.css */
.search-bar {
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
}

.search-input-container {
  display: flex;
  border: 2px solid #444;
  border-radius: 5px;
  overflow: hidden;
  background-color: rgba(0, 0, 0, 0.3);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.search-input {
  padding: 1rem;
  border: none;
  flex: 1;
  font-size: 1.2rem;
  color: #fff;
  background-color: transparent;
}

.search-button {
  padding: 1rem 2rem;
  background: linear-gradient(45deg, #ff9900, #ff6600);
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-left: 1rem;
  transition: background-color 0.3s ease;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.search-button:hover {
  background: linear-gradient(45deg, #ff6600, #ff9900);
}
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\SearchResults.css
File Name: SearchResults.css
Code:
/* SearchResults.css */
.search-results-container {
  text-align: center;
  padding: 2rem;
}

.search-results-heading {
  font-size: 2.5rem;
  margin-bottom: 2rem;
  color: #ff9900;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

.no-results {
  font-size: 1.5rem;
  color: #aaa;
}

.job-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
}

.job-card {
  border: 1px solid #444;
  border-radius: 10px;
  padding: 2rem;
  background: linear-gradient(135deg, #2e2e2e, #444);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s ease;
  cursor: pointer;
}

.job-card:hover {
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
}

.job-title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #ff9900;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

.company-name {
  font-weight: bold;
  margin-bottom: 1rem;
  color: #bbb;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

.salary,
.job-type,
.job-location,
.job-publisher {
  margin-bottom: 1rem;
  color: #ccc;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 2rem;
}

.pagination-button {
  padding: 0.5rem 1rem;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 0 0.5rem;
}

.pagination-button:disabled {
  background-color: #444;
  cursor: not-allowed;
}

.pagination-info {
  font-size: 1.2rem;
  color: #ccc;
}
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\components\JobModal.js
File Name: JobModal.js
Code:
import React, { useEffect } from 'react';
import '../JobModal.css';

const JobModal = ({ job, onClose }) => {
  useEffect(() => {
    const handleClickOutside = (event) => {
      const modal = document.querySelector('.job-modal-content');
      if (modal && !modal.contains(event.target)) {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [onClose]);

  return (
    <div className="job-modal">
      <div className="job-modal-content">
        <span className="close-button" onClick={onClose}>
          &times;
        </span>
        <h2 className="job-title">{job.job_title}</h2>
        <p className="company-name">{job.employer_name}</p>
        {job.salary && <p className="salary">Salary: {job.salary}</p>}
        <p className="job-type">Job Type: {job.job_employment_type}</p>
        <p className="job-location">
          Location: {job.job_city}, {job.job_state}
        </p>
        <p className="job-publisher">Publisher: {job.job_publisher}</p>
        <a
          href={job.job_apply_link}
          target="_blank"
          rel="noopener noreferrer"
          className="apply-link"
        >
          Apply on Website
        </a>
        <p className="job-description">Description: {job.job_description}</p>
      </div>
    </div>
  );
};

export default JobModal;
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\components\searchBar.js
File Name: searchBar.js
Code:
// SearchBar.js
import React, { useState } from 'react';
import '../SearchBar.css';


const SearchBar = ({ onJobSearch, onLocationSearch, onSearchSubmit }) => {
  const [jobInput, setJobInput] = useState('');
  const [locationInput, setLocationInput] = useState('');

  const handleJobInputChange = (event) => {
    setJobInput(event.target.value);
    onJobSearch(event.target.value);
  };

  const handleLocationInputChange = (event) => {
    setLocationInput(event.target.value);
    onLocationSearch(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    onSearchSubmit();
  };

  return (
    <form className="search-bar" onSubmit={handleSubmit}>
      <div className="search-input-container">
        <input
          type="text"
          placeholder="Job title, keywords..."
          value={jobInput}
          onChange={handleJobInputChange}
          className="search-input"
        />
        <input
          type="text"
          placeholder="Location..."
          value={locationInput}
          onChange={handleLocationInputChange}
          className="search-input"
        />
      </div>
      <button type="submit" className="search-button">
        <i className="fas fa-search"></i> Search
      </button>
    </form>
  );
};

export default SearchBar;
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\pages\JobSearch.js
File Name: JobSearch.js
Code:
// JobSearch.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import SearchBar from '../components/searchBar';
import '../JobSearch.css';

const JobSearch = () => {
  const navigate = useNavigate();
  const [jobQuery, setJobQuery] = useState('');
  const [locationQuery, setLocationQuery] = useState('');

  const handleSearch = async () => {
    try {
      const query = `${jobQuery} ${locationQuery}`.trim();
      const response = await fetch(`http://127.0.0.1:8000/api/search-jobs/?q=${encodeURIComponent(query)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch search results');
      }
      const data = await response.json();
      if (data.data && data.data.length > 0) {
        navigate('/search-results', { state: { searchResults: data.data } });
      } else {
        console.log('No search results found');
      }
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="job-search-container">
      <h1 className="job-search-heading">Job Search </h1>
      <SearchBar
        onJobSearch={setJobQuery}
        onLocationSearch={setLocationQuery}
        onSearchSubmit={handleSearch}
      />
    </div>
  );
};

export default JobSearch;
----------------------------------------
File Path: C:\Users\admin\Desktop\Everything from previous laptop\job_search\frontend\src\pages\SearchResults.js
File Name: SearchResults.js
Code:
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import SearchBar from '../components/searchBar';
import JobModal from '../components/JobModal';
import '../SearchResults.css';

const SearchResults = ({ onJobSearch, onLocationSearch }) => { // Receive onJobSearch and onLocationSearch as props
  const location = useLocation();
  const navigate = useNavigate();
  const searchResults = location.state?.searchResults || [];
  const [showJobModal, setShowJobModal] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobQuery, setJobQuery] = useState('');
  const [locationQuery, setLocationQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    const handleSearch = async () => {
      try {
        const query = `${jobQuery} ${locationQuery}`.trim();
        const response = await fetch(`http://127.0.0.1:8000/api/search-jobs/?q=${encodeURIComponent(query)}&page=${currentPage}`);
        if (!response.ok) {
          throw new Error('Failed to fetch search results');
        }
        const data = await response.json();
        if (data.data && data.data.length > 0) {
          navigate('/search-results', { state: { searchResults: data.data } });
          setTotalPages(data.num_pages);
        } else {
          console.log('No search results found');
        }
      } catch (error) {
        console.error(error);
      }
    };

    handleSearch();
  }, [jobQuery, locationQuery, currentPage, navigate]);

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleSearch = async () => {
    try {
      const query = `${jobQuery} ${locationQuery}`.trim();
      const response = await fetch(`http://127.0.0.1:8000/api/search-jobs/?q=${encodeURIComponent(query)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch search results');
      }
      const data = await response.json();
      if (data.data && data.data.length > 0) {
        navigate('/search-results', { state: { searchResults: data.data } });
      } else {
        console.log('No search results found');
      }
    } catch (error) {
      console.error(error);
    }
  };

  const showJobDetails = (job) => {
    setSelectedJob(job);
    setShowJobModal(true);
  };

  const closeJobModal = () => {
    setShowJobModal(false);
    setSelectedJob(null);
  };

  return (
    <div className="search-results-container">
      <SearchBar
        onJobSearch={setJobQuery}
        onLocationSearch={setLocationQuery}
        onSearchSubmit={handleSearch}
      />
      <h1 className="search-results-heading">Search Results</h1>
      {searchResults.length === 0 ? (
        <p className="no-results">No search results found.</p>
      ) : (
        <div className="job-list">
          {searchResults.map((result, index) => (
            <div
              key={index}
              className="job-card"
              onClick={() => showJobDetails(result)}
            >
              <h2 className="job-title">{result.job_title}</h2>
              <p className="company-name">{result.employer_name}</p>
              {result.salary && <p className="salary">Salary: {result.salary}</p>}
              <p className="job-type">Job Type: {result.job_employment_type}</p>
              <p className="job-location">
                Location: {result.job_city}, {result.job_state}
              </p>
              <p className="job-publisher">Publisher: {result.job_publisher}</p>
            </div>
          ))}
        </div>
      )}
      {showJobModal && <JobModal job={selectedJob} onClose={closeJobModal} />}
    
      <div className="pagination">
  <button
    onClick={handlePrevPage}
    disabled={currentPage === 1}
    className="pagination-button"
  >
    Previous
  </button>
  <span className="pagination-info">
    Page {currentPage} of {totalPages}
  </span>
  <button
    onClick={handleNextPage}
    disabled={currentPage === totalPages}
    className="pagination-button"
  >
    Next
  </button>
</div>

    </div>
  );
};

export default SearchResults;
----------------------------------------
